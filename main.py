# pip install pandas numpy matplotlib seaborn python-dotenv

import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from dotenv import load_dotenv

# === CONFIG ===
load_dotenv()
CSV_PATH = os.path.join(os.getcwd(), input("File name: "))

# === LOAD DATA ===
df = pd.read_csv(CSV_PATH)
print(f"âœ… Loaded {len(df)} entries, {len(df.columns)} columns")

# === DROP unnecessary columns ===
df = df.drop(columns=[col for col in df.columns if "Onay" in col], errors="ignore")

# === CONVERSIONS ===
df["Cinsiyet"] = df["Cinsiyet"].map({"ERKEK": 0, "KIZ": 1})
df["Okul TÃ¼rÃ¼"] = df["Okul TÃ¼rÃ¼"].map({"DEVLET": 0, "Ã–ZEL": 1})
df["SÄ±nÄ±f Seviyesi"] = df["SÄ±nÄ±f Seviyesi"].replace("HazÄ±rlÄ±k", 8.5).infer_objects(copy=False)
df["SÄ±nÄ±f Seviyesi"] = pd.to_numeric(df["SÄ±nÄ±f Seviyesi"], errors="coerce")

# Numeric columns
numeric_cols = [
    "YaÅŸ", "Ortalama Uyku SÃ¼resi", "Uykuya Dalmada Zorluk DÃ¼zeyi",
    "SabahlarÄ± Alarm Erteleme DÃ¼zeyi", "Akademik BaÅŸarÄ± Memnuniyeti",
    "Uyku Kalitesi", "Sabah Yorgun Uyanma DÃ¼zeyi", "GÃ¼nlÃ¼k Ekran KullanÄ±m SÃ¼resi",
    "Son DÃ¶nem Not OrtalamasÄ±", "LGS PuanÄ±", "HaftalÄ±k Ders Ã‡alÄ±ÅŸma SÃ¼resi",
    "Derslerde Dikkat DaÄŸÄ±nÄ±klÄ±ÄŸÄ± DÃ¼zeyi", "GÃ¼nlÃ¼k Kafein TÃ¼ketimi",
    "HaftalÄ±k Spor Yapma SÄ±klÄ±ÄŸÄ±", "Genel Stres DÃ¼zeyi",
    "Uyku Ã–ncesi Telefon KullanÄ±mÄ±"
]
for col in numeric_cols:
    if col in df.columns:
        df[col] = pd.to_numeric(df[col], errors="coerce")

# === MULTIPLE CHOICE MAPPINGS ===
platforms = [
    "Instagram", "TikTok", "YouTube", "Snapchat", "Facebook",
    "X (Twitter)", "Reddit", "Discord", "Pinterest", "LinkedIn", "Twitch"
]
for p in platforms:
    df[p] = df["SÄ±k KullandÄ±ÄŸÄ±nÄ±z Platformlar"].astype(str).apply(lambda x: 1 if p in x else 0)

purposes = ["Sosyal Medya", "Oyun", "EÄŸitim", "Video / Film Ä°zleme", "Spor"]
for p in purposes:
    df[p] = df["Telefon, PC gibi teknolojik cihazlarÄ± genellikle hangi amaÃ§la kullanÄ±yorsunuz?"].astype(str).apply(
        lambda x: 1 if p in x else 0
    )

df = df.drop(columns=[
    "SÄ±k KullandÄ±ÄŸÄ±nÄ±z Platformlar",
    "Telefon, PC gibi teknolojik cihazlarÄ± genellikle hangi amaÃ§la kullanÄ±yorsunuz?"
], errors="ignore")

# === DATA CLEANING ===
# Remove unrealistic outliers (3 std rule)
for col in numeric_cols:
    if col in df.columns:
        mean, std = df[col].mean(), df[col].std()
        df = df[(df[col] > mean - 3*std) & (df[col] < mean + 3*std)]

# Fill missing numeric values with median
df[numeric_cols] = df[numeric_cols].fillna(df[numeric_cols].median())

# === CORRELATION ANALYSIS ===
plt.figure(figsize=(16, 12))
corr = df.corr(numeric_only=True)
sns.heatmap(corr, cmap="coolwarm", annot=False)
plt.title("DeÄŸiÅŸkenler ArasÄ±ndaki Korelasyon HaritasÄ±", fontsize=16)
plt.tight_layout()
plt.show(block=False)

# === TOP CORRELATIONS ===
print("\nğŸ“Š En GÃ¼Ã§lÃ¼ Korelasyonlar:")
mask = np.triu(np.ones(corr.shape), k=1).astype(bool)
corr_pairs = corr.where(mask).unstack().dropna().sort_values(ascending=False)
print(corr_pairs.head(20))

# === SPEARMAN (for ranked data) ===
spearman_corr = df.corr(method="spearman", numeric_only=True)
print("\nğŸ“ˆ Spearman Korelasyon (SÄ±ralÄ± DeÄŸiÅŸkenler iÃ§in):")
print(spearman_corr.unstack().sort_values(ascending=False).drop_duplicates().head(15))

# === VISUAL RELATIONSHIPS ===
plots = [
    ("Uyku Ã–ncesi Telefon KullanÄ±mÄ±", "Uyku Kalitesi"),
    ("GÃ¼nlÃ¼k Ekran KullanÄ±m SÃ¼resi", "Uyku Kalitesi"),
    ("HaftalÄ±k Ders Ã‡alÄ±ÅŸma SÃ¼resi", "Son DÃ¶nem Not OrtalamasÄ±"),
    ("Genel Stres DÃ¼zeyi", "Uyku Kalitesi"),
]
for x, y in plots:
    if x in df.columns and y in df.columns:
        plt.figure(figsize=(8,6))
        sns.regplot(data=df, x=x, y=y, scatter_kws={'alpha':0.6})
        plt.title(f"{x} vs {y}")
        plt.show(block=False)
        plt.pause(0.001)

# === SUMMARY ===
print("\n--- ğŸ“‹ Ã–zet ---")
print(f"Toplam KatÄ±lÄ±mcÄ±: {len(df)}")
print("\nEksik Veriler:")
print(df.isna().sum()[df.isna().sum() > 0])

input("\nENTER'a basarak tÃ¼m grafikleri kapatÄ±n...")
plt.close('all')
